Urban <- BigCity_red[which(BigCity_red$Zone == "Urban"),]
Urban_Exp <- Urban$Expenditure
length(Urban_Exp)
mean(Urban_Exp)
Urban_ys <- sample(Urban_Exp, size = 30, replace = FALSE)
mean(Urban_ys)
var(Rural_Exp)
var(Urban_Exp)
ys <- c(Rural_ys, Urban_ys)
ys
Rural_ys
Urban_ys
library(TeachingSampling)
library(BayesSampling)
data(BigCity)
head(BigCity)
end <- dim(BigCity)[1]
end
s <- seq(from = 1, to = end, by = 1)
set.seed(3)
samp <- sample(s, size = 10000, replace = FALSE)
ordered_samp <- sort(samp)
BigCity_red <- BigCity[ordered_samp,]
Rural <- BigCity_red[which(BigCity_red$Zone == "Rural"),]
Rural_Exp <- Rural$Expenditure
length(Rural_Exp)
mean(Rural_Exp)
Rural_ys <- sample(Rural_Exp, size = 30, replace = FALSE)
mean(Rural_ys)
Urban <- BigCity_red[which(BigCity_red$Zone == "Urban"),]
Urban_Exp <- Urban$Expenditure
length(Urban_Exp)
mean(Urban_Exp)
Urban_ys <- sample(Urban_Exp, size = 30, replace = FALSE)
mean(Urban_ys)
ys <- c(Rural_ys, Urban_ys)
h <- c(30,30)
N <- c(length(Rural_Exp), length(Urban_Exp))
m <- c(290, 440)
v=c(4*(10.1^4), 10.1^5)
sigma = c(sqrt(4*10^4), sqrt(10^5))
Estimator <- BLE_SSRS(ys,h,N,m,v,sigma)
Estimator$est.beta
ys <- c(Rural_ys, Urban_ys)
h <- c(30,30)
N <- c(length(Rural_Exp), length(Urban_Exp))
m <- c(280, 420)
v=c(4*(10.1^4), 10.1^5)
sigma = c(sqrt(4*10^4), sqrt(10^5))
Estimator <- BLE_SSRS(ys,h,N,m,v,sigma)
Estimator$est.beta
Estimator$Vest.beta
Estimator$est.mean
Estimator$est.beta
library(TeachingSampling)
library(BayesSampling)
data(BigCity)
end <- dim(BigCity)[1]
end
s <- seq(from = 1, to = end, by = 1)
set.seed(3)
samp <- sample(s, size = 10000, replace = FALSE)
ordered_samp <- sort(samp)
BigCity_red <- BigCity[ordered_samp,]
Expend <- BigCity_red$Expenditure
Expend[1:5]
Expend
Income <- BigCity_red$Income
Income[1:5]
mean(Expend/Income)     #razão real, que quero estimar
sampl <- sample(seq(1,10.000),20)   #20 indices
sampl <- sample(seq(1,10.000),size=20)   #20 indices
sampl <- sample(seq(1,10000),size=20)   #20 indices
sampl
ys <- Expend[sampl,]
ys <- Expend[sampl]
ys
xs <- Income[sampl]
x_nots <- BigCity_red$Income[-sampl,]  #ver se funciona
x_nots <- BigCity_red$Income[-sampl]  #ver se funciona
x_nots
teste <- c(1,2,3,4,5,6,7,8,9,0)
nao <- c(1,3,9)
teste[nao]
teste[-nao]
?BLE_Ratio
mean(ys)/mean(xs)    #classic ratio estimator
mean(Expend/Income)     #razão real, que quero estimar
var(Expend/Income)
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.25, sigma = sqrt(0.23))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.30, sigma = sqrt(0.23))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.30, sigma = sqrt(0.29))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.23, sigma = sqrt(0.24))
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.24, sigma = sqrt(0.23))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.2, sigma = sqrt(0.23))
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.2, sigma = sqrt(0.1))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.2, sigma = sqrt(0.195))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.1, sigma = sqrt(0.095))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.95, v = 0.1, sigma = sqrt(0.095))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 1.1, sigma = 1)
Estimator$est.beta
mean(Expend/Income) ,    #razão real, que quero estimar
sampl <- sample(seq(1,10000),size=20)   #20 indices
data(BigCity)
end <- dim(BigCity)[1]
s <- seq(from = 1, to = end, by = 1)
set.seed(3)
samp <- sample(s, size = 10000, replace = FALSE)
ordered_samp <- sort(samp)
BigCity_red <- BigCity[ordered_samp,]
Expend <- BigCity_red$Expenditure
Income <- BigCity_red$Income
mean(Expend/Income)     #razão real, que quero estimar
var(Expend/Income)     #razão real, que quero estimar
sampl <- sample(seq(1,10000),size=20)   #20 indices
ys <- Expend[sampl]
xs <- Income[sampl]
x_nots <- BigCity_red$Income[-sampl]
mean(ys)/mean(xs)    #classic ratio estimator
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.24)
Estimator$est.beta
sum(xs)
sum(xs)/0.25
1/(sum(xs)/0.25)
end <- dim(BigCity)[1]
s <- seq(from = 1, to = end, by = 1)
set.seed(3)
samp <- sample(s, size = 10000, replace = FALSE)
ordered_samp <- sort(samp)
BigCity_red <- BigCity[ordered_samp,]
Expend <- BigCity_red$Expenditure
Income <- BigCity_red$Income
mean(Expend/Income)     #razão real, que quero estimar
sampl <- sample(seq(1,10000),size=10)   #20 indices
ys <- Expend[sampl]
xs <- Income[sampl]
x_nots <- BigCity_red$Income[-sampl]
mean(ys)/mean(xs)    #classic ratio estimator
end <- dim(BigCity)[1]
s <- seq(from = 1, to = end, by = 1)
set.seed(5)
samp <- sample(s, size = 10000, replace = FALSE)
ordered_samp <- sort(samp)
BigCity_red <- BigCity[ordered_samp,]
Expend <- BigCity_red$Expenditure
Income <- BigCity_red$Income
mean(Expend/Income)     #razão real, que quero estimar
sampl <- sample(seq(1,10000),size=10)   #20 indices
ys <- Expend[sampl]
xs <- Income[sampl]
x_nots <- BigCity_red$Income[-sampl]
mean(ys)/mean(xs)    #classic ratio estimator
1/(sum(xs)/0.25)
sum(xs)/0.25)
sum(xs)/0.25
e2
E3
10^-3
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.24, sigma = sqrt(v-10^-4))
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.24, sigma = sqrt(0.24-10^-4))
Estimator$est.beta
10^-5
1e-05
e-05
2e3
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.24, sigma = sqrt(0.24*(1e-5)))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.24, sigma = sqrt(0.24*(1-1e-5)))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.24, sigma = sqrt(0.24*(1-1e-4)))
Estimator$est.beta
0.24*(1-1e-4)
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.24, sigma = sqrt(0.2399))
Estimator$est.beta
Estimator <- BLE_Ratio(ys,xs,x_nots, m = 0.85, v = 0.24, sigma = sqrt(0.23998))
Estimator$est.beta
Estimator$Vest.beta
Estimator$est.mean[1,]
Estimator$est.mean[1:4]
Estimator$est.mean[1:4,]
Estimator$Vest.mean[1:5,1:5]
Estimator$est.tot
sum(ys)
sum(Expend)
sum(Income)
data(BigCity)
head(BigCity)
set.seed(3)
Expend <- sample(BigCity$Expenditure,10000)
N <- length(Expend)
mean(Expend)
ys <- sample(Expend, size = 20, replace = FALSE)
mean(ys)
Estimator <- BLE_SRS(ys,N, m=400, v=10.1^5, sigma = sqrt(10^5))
Estimator$est.beta
set.seed(1)
Expend <- sample(BigCity$Expenditure,10000)
N <- length(Expend)
mean(Expend)
ys <- sample(Expend, size = 20, replace = FALSE)
mean(ys)
data(BigCity)
end <- dim(BigCity)[1]
end
s <- seq(from = 1, to = end, by = 1)
set.seed(3)
samp <- sample(s, size = 10000, replace = FALSE)
ordered_samp <- sort(samp)
BigCity_red <- BigCity[ordered_samp,]
Rural <- BigCity_red[which(BigCity_red$Zone == "Rural"),]
Rural_Exp <- Rural$Expenditure
length(Rural_Exp)
mean(Rural_Exp)
Rural_ys <- sample(Rural_Exp, size = 30, replace = FALSE)
mean(Rural_ys)
Urban <- BigCity_red[which(BigCity_red$Zone == "Urban"),]
Urban_Exp <- Urban$Expenditure
length(Urban_Exp)
mean(Urban_Exp)
Urban_ys <- sample(Urban_Exp, size = 30, replace = FALSE)
mean(Urban_ys)
ys <- c(Rural_ys, Urban_ys)
h <- c(30,30)
N <- c(length(Rural_Exp), length(Urban_Exp))
m <- c(280, 420)
v=c(4*(10.1^4), 10.1^5)
sigma = c(sqrt(4*10^4), sqrt(10^5))
Estimator <- BLE_SSRS(ys,h,N,m,v,sigma)
Estimator$est.beta
set.seed(4)
samp <- sample(s, size = 10000, replace = FALSE)
ordered_samp <- sort(samp)
BigCity_red <- BigCity[ordered_samp,]
Rural <- BigCity_red[which(BigCity_red$Zone == "Rural"),]
Rural_Exp <- Rural$Expenditure
length(Rural_Exp)
mean(Rural_Exp)
Rural_ys <- sample(Rural_Exp, size = 30, replace = FALSE)
mean(Rural_ys)
Urban <- BigCity_red[which(BigCity_red$Zone == "Urban"),]
Urban_Exp <- Urban$Expenditure
length(Urban_Exp)
mean(Urban_Exp)
Urban_ys <- sample(Urban_Exp, size = 30, replace = FALSE)
mean(Urban_ys)
data(BigCity)
head(BigCity)
set.seed(4)
Expend <- sample(BigCity$Expenditure,10000)
N <- length(Expend)
mean(Expend)
ys <- sample(Expend, size = 20, replace = FALSE)
mean(ys)
Estimator <- BLE_SRS(ys,N, m=400, v=10.1^5, sigma = sqrt(10^5))
Estimator$est.beta
3
set.seed(3)
Expend <- sample(BigCity$Expenditure,10000)
N <- length(Expend)
mean(Expend)
ys <- sample(Expend, size = 20, replace = FALSE)
mean(ys)
set.seed(7)
Expend <- sample(BigCity$Expenditure,10000)
N <- length(Expend)
mean(Expend)
ys <- sample(Expend, size = 20, replace = FALSE)
mean(ys)
Estimator <- BLE_SRS(ys,N, m=400, v=10.1^5, sigma = sqrt(10^5))
Estimator$est.beta
Estimator$Vest.beta
Estimator$est.mean[1,]
Estimator$Vest.mean[1:5,1:5]
Estimator$est.tot
Estimator$Vest.tot
set.seed(6)
Expend <- sample(BigCity$Expenditure,10000)
N <- length(Expend)
mean(Expend)
ys <- sample(Expend, size = 20, replace = FALSE)
mean(ys)
Estimator <- BLE_SRS(ys,N, m=400, v=10.1^5, sigma = sqrt(10^5))
Estimator$est.beta
Estimator$Vest.beta
Estimator <- BLE_SRS(ys,N, m=430, v=10.1^5, sigma = sqrt(10^5))
Estimator$est.beta
set.seed(3)
Expend <- sample(BigCity$Expenditure,10000)
N <- length(Expend)
mean(Expend)
ys <- sample(Expend, size = 20, replace = FALSE)
mean(ys)
Estimator <- BLE_SRS(ys,N, m=430, v=10.1^5, sigma = sqrt(10^5))
Estimator$est.beta
Estimator$Vest.beta
set.seed(3)
Expend <- sample(BigCity$Expenditure,10000)
N <- length(Expend)
mean(Expend)
ys <- sample(Expend, size = 20, replace = FALSE)
mean(ys)
Estimator <- BLE_SRS(ys,N, m=400, v=10.1^5, sigma = sqrt(10^5))
Estimator$est.beta
set.seed(1)
Expend <- sample(BigCity$Expenditure,10000)
N <- length(Expend)
mean(Expend)
ys <- sample(Expend, size = 20, replace = FALSE)
mean(ys)
Estimator <- BLE_SRS(ys,N, m=300, v=10.1^5, sigma = sqrt(10^5))
Estimator$est.beta
Estimator$Vest.beta
Estimator$est.mean[1,]
Estimator$Vest.mean[1:5,1:5]
Estimator$est.tot
sum(Expend)
?BLE_SRS
?lm
?seq
?mean
?Teaching;sampling
?TeachingSampling
??TeachingSampling
library(BayesSampling)
?BLE_SRS
?BLE_SSRS
?BLE_Ratio
library(BayesSampling)
?BLE_Ratio
?BLE_Ratio
library(BayesSampling)
?BLE_Ratio
library(BayesSampling)
?BLE_Ratio
library(BayesSampling)
?BLE_Ratio
?BLE_SRS
library(BayesSampling)
?BLE_SRS
library(BayesSampling)
?BLE_SRS
?BLE_Ratio
?BigCity
data(BigCity)
library(TeachingSampling)
data(BigCity)
?BigCity
data(TeachingSampling::BigCity)
usethis::use_data(BigCity)
library(BayesSampling)
data(BigCity)
head(BigCity)
head(BigCity)
head(BigCity)
head(BigCity)
library(BayesSampling)
head(BigCity)
library(BayesSampling)
head(BigCity)
data(BigCity)
?BigCity
BayesSampling::BigCity
?BayesSampling::BigCity
?TeachingSampling::E.1SI()
?TeachingSampling::BigCity
?TeachingSampling::BigCity
library(BayesSampling)
?BayesSampling::BigCity
library(BayesSampling)
?BayesSampling::BigCity
library(BayesSampling)
?BayesSampling::BLE_Ratio
?BayesSampling::BigCity
#' creates vector of 1's to be used in the estimators
#' @param y sample matrix
#' @return vector of 1's with size equals to the number of observations in the sample
#' @examples
#'
#' y <- matrix(3,4,3)
#' create1(y)
#'
#'
create1 <- function(y){
if(is.vector(y)){
vect1 <- rep(1,length(y))
}
else if(is.list(y)){
vect1 <- rep(1,dim(y)[1])
}
else if(is.matrix(y)){
vect1 <- rep(1,length(y[,1]))
}
else {
stop("incorrect number of dimensions")
}
return(vect1)
}
y <- matrix(3,4,3)
create1(y)
?BLE_Ratio
?BLE_SRS
library(BayesSampling)
?BLE_SRS
ys <- c(5,6,8)
m <- 6
v <- 5
sigma <- 1
N <- 5
teste <- BLE_SRS(ys,N,m,v,sigma)
teste
ys <- c(2,-1,1.5, 6,10, 8,8)
h <- c(3,2,2)
m <- c(0,9,8)
v <- c(3,8,1)
sigma <- c(1,2,0.5)
N <- c(5,5,3)
teste <- BLE_SSRS(ys,h,N,m,v,sigma)
teste$est.beta
teste$Vest.beta
teste$est.mean
teste$Vest.mean
teste$est.tot
teste$Vest.tot
ys <- c(10,8,6)
xs <- c(5,4,3.1)
x_nots <- c(1,20,13,15,-5)
m <- 2.5
v <- 10
sigma <- 2
teste <- BLE_Ratio(ys,xs,x_nots,m,v,sigma)
teste
xs <- matrix(c(1,1,1,1,2,3,5,0),nrow=4,ncol=2)
ys <- c(12,17,28,2)
xs
ys
x_nots <- matrix(c(1,1,1,0,1,4),nrow=3,ncol=2)
x_nots <- matrix(c(1,1,1,0,1,4),nrow=3,ncol=2)
x_nots
a <- c(1.5,6)
R <- matrix(c(10,2,2,10),nrow=2,ncol=2)
R
Vs <- diag(c(1,1,1,1))
V_nots <- diag(c(1,1,1))
Vs
V_nots
Estimator <- BLE_Reg(ys,xs,a,R,Vs,x_nots,V_nots)
Estimator
library(BayesSampling)
?BLE_Ratio
library(BayesSampling)
install.packages("rhub")
library(rhub)
rhub::validate_email()
check()
rhub::validate_email()
rhub::validate_email()
check()
check()
cran_prep <- check_for_cran()
list_validated_emails()
validate_email()
devtools::release()
devtools::spell_check()
devtools::spell_check(package="BayesSampling")
devtools::spell_check(pkg = "BayesSampling")
install.packages('BayesSampling')
install.packages("BayesSampling")
devtools::spell_check(pkg = "BayesSampling")
R.version
devtools::spell_check()
devtools::release()
library(rhub)
check_rhub()
devtools::check_rhub()
list_validated_emails
library(rhub)
library(rhub)
list_validated_emails()
rhub::check_for_cran()
?check_for_cran
rhub::check_for_cran()
rhub::check_for_cran()
?rhub
??rhub
rhub::check_on_linux()
rhub::check_on_macos()
devtools::spell_check()
devtools::spell_check(pkg = 'BayesSampling')
devtools::spell_check(pkg = BayesSampling)
devtools::spell_check(pkg = "BayesSampling")
?devtools::spell_check()
devtools::spell_check(pkg = "BayesSampling.Rproj")
devtools::spell_check(pkg = "BayesSampling.Rproj")
usethis::use_spell_check()
install.packages('spelling')
devtools::spell_check()
usethis::use_spell_check()
spell <- devtools::spell_check()
spell
spell
spell <- devtools::spell_check()
spell
spell <- devtools::spell_check()
spell
